import React, { useState } from 'react';
import * as S from './PartsLookup.styles';
import {
  FaCog, FaSearch, FaSpinner, FaInfoCircle, FaBarcode,
  FaIndustry, FaBox, FaDollarSign, FaCheckCircle, FaTimesCircle
} from 'react-icons/fa';
import apiClient from '../../api/apiClient';

const PartsLookup = () => {
  const [searchType, setSearchType] = useState('partNumber'); // 'partNumber' or 'name'
  const [searchValue, setSearchValue] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [part, setPart] = useState(null);
  const [notFound, setNotFound] = useState(false);

  const handleSearch = async (e) => {
    e.preventDefault();

    if (!searchValue.trim()) {
      setError('Vui l√≤ng nh·∫≠p th√¥ng tin t√¨m ki·∫øm');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setPart(null);
      setNotFound(false);

      let response;
      if (searchType === 'partNumber') {
        // Search by part number
        response = await apiClient(`/api/parts/by-part-number?partNumber=${encodeURIComponent(searchValue.trim())}`);
      } else {
        // Search by name
        const searchResponse = await apiClient(`/api/parts/search?name=${encodeURIComponent(searchValue.trim())}&page=0&size=1`);
        if (searchResponse.content && searchResponse.content.length > 0) {
          response = searchResponse.content[0];
        } else {
          setNotFound(true);
          return;
        }
      }

      console.log('üîß Part found:', response);
      setPart(response);
    } catch (err) {
      console.error('‚ùå Error searching part:', err);
      if (err.message.includes('404') || err.message.includes('not found')) {
        setNotFound(true);
      } else {
        setError(err.message || 'Kh√¥ng th·ªÉ t√¨m ki·∫øm ph·ª• t√πng');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setSearchValue('');
    setPart(null);
    setError(null);
    setNotFound(false);
  };

  const formatCurrency = (amount) => {
    if (!amount) return 'N/A';
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const getStockStatus = (quantity) => {
    if (quantity === null || quantity === undefined) {
      return { text: 'Kh√¥ng x√°c ƒë·ªãnh', color: '#6b7280', icon: <FaInfoCircle /> };
    }

    if (quantity === 0) {
      return { text: 'H·∫øt h√†ng', color: '#ef4444', icon: <FaTimesCircle /> };
    }

    if (quantity < 10) {
      return { text: `S·∫Øp h·∫øt (${quantity})`, color: '#f59e0b', icon: <FaInfoCircle /> };
    }

    return { text: `C√≤n h√†ng (${quantity})`, color: '#10b981', icon: <FaCheckCircle /> };
  };

  return (
    <S.PageContainer>
      <S.Header>
        <S.HeaderTitle>
          <FaCog /> Tra c·ª©u Ph·ª• t√πng
        </S.HeaderTitle>
        <S.HeaderSubtitle>
          T√¨m ki·∫øm th√¥ng tin ph·ª• t√πng theo m√£ ho·∫∑c t√™n
        </S.HeaderSubtitle>
      </S.Header>

      {/* Search Form */}
      <S.SearchCard>
        <form onSubmit={handleSearch}>
          <S.SearchTypeSelector>
            <S.RadioLabel $active={searchType === 'partNumber'}>
              <input
                type="radio"
                name="searchType"
                value="partNumber"
                checked={searchType === 'partNumber'}
                onChange={(e) => setSearchType(e.target.value)}
              />
              T√¨m theo M√£ ph·ª• t√πng
            </S.RadioLabel>
            <S.RadioLabel $active={searchType === 'name'}>
              <input
                type="radio"
                name="searchType"
                value="name"
                checked={searchType === 'name'}
                onChange={(e) => setSearchType(e.target.value)}
              />
              T√¨m theo T√™n ph·ª• t√πng
            </S.RadioLabel>
          </S.SearchTypeSelector>

          <S.SearchInputGroup>
            <S.SearchInput
              type="text"
              value={searchValue}
              onChange={(e) => setSearchValue(e.target.value)}
              placeholder={searchType === 'partNumber' ? 'Nh·∫≠p m√£ ph·ª• t√πng (v√≠ d·ª•: PT-001)' : 'Nh·∫≠p t√™n ph·ª• t√πng (v√≠ d·ª•: Pin Lithium)'}
            />
            <S.SearchButton type="submit" disabled={loading}>
              {loading ? <FaSpinner className="spin" /> : <FaSearch />}
              {loading ? 'ƒêang t√¨m...' : 'T√¨m ki·∫øm'}
            </S.SearchButton>
            {(part || notFound || error) && (
              <S.ResetButton type="button" onClick={handleReset}>
                L√†m m·ªõi
              </S.ResetButton>
            )}
          </S.SearchInputGroup>
        </form>
      </S.SearchCard>

      {/* Error Message */}
      {error && (
        <S.ErrorMessage>
          <FaInfoCircle />
          {error}
        </S.ErrorMessage>
      )}

      {/* Not Found Message */}
      {notFound && (
        <S.NotFoundMessage>
          <FaCog />
          <h3>Kh√¥ng t√¨m th·∫•y ph·ª• t√πng</h3>
          <p>Kh√¥ng c√≥ ph·ª• t√πng n√†o v·ªõi {searchType === 'partNumber' ? 'm√£' : 't√™n'}: <strong>{searchValue}</strong></p>
        </S.NotFoundMessage>
      )}

      {/* Part Details */}
      {part && (
        <S.PartCard>
          <S.PartHeader>
            <S.PartTitle>
              <FaCog /> {part.partName || part.name || 'N/A'}
            </S.PartTitle>
            <S.StockBadge $color={getStockStatus(part.stockQuantity || part.quantity).color}>
              {getStockStatus(part.stockQuantity || part.quantity).icon}
              {getStockStatus(part.stockQuantity || part.quantity).text}
            </S.StockBadge>
          </S.PartHeader>

          <S.PartGrid>
            <S.InfoItem>
              <S.InfoLabel><FaBarcode /> M√£ ph·ª• t√πng</S.InfoLabel>
              <S.InfoValue>{part.partNumber || 'N/A'}</S.InfoValue>
            </S.InfoItem>

            <S.InfoItem>
              <S.InfoLabel><FaIndustry /> Nh√† s·∫£n xu·∫•t</S.InfoLabel>
              <S.InfoValue>{part.manufacturer || 'N/A'}</S.InfoValue>
            </S.InfoItem>

            <S.InfoItem>
              <S.InfoLabel><FaBox /> Danh m·ª•c</S.InfoLabel>
              <S.InfoValue>{part.category || 'N/A'}</S.InfoValue>
            </S.InfoItem>

            <S.InfoItem>
              <S.InfoLabel><FaDollarSign /> Gi√°</S.InfoLabel>
              <S.InfoValue>{formatCurrency(part.price || part.partPrice)}</S.InfoValue>
            </S.InfoItem>

            <S.InfoItem>
              <S.InfoLabel><FaBox /> S·ªë l∆∞·ª£ng t·ªìn kho</S.InfoLabel>
              <S.InfoValue>{part.stockQuantity ?? part.quantity ?? 'N/A'}</S.InfoValue>
            </S.InfoItem>

            <S.InfoItem>
              <S.InfoLabel><FaCheckCircle /> ƒê∆∞·ª£c b·∫£o h√†nh</S.InfoLabel>
              <S.InfoValue>
                {part.warrantyCoverage !== undefined
                  ? (part.warrantyCoverage ? 'C√≥' : 'Kh√¥ng')
                  : 'N/A'}
              </S.InfoValue>
            </S.InfoItem>

            {part.description && (
              <S.InfoItem $fullWidth>
                <S.InfoLabel><FaInfoCircle /> M√¥ t·∫£</S.InfoLabel>
                <S.InfoValue>{part.description}</S.InfoValue>
              </S.InfoItem>
            )}

            {part.supplier && (
              <S.InfoItem $fullWidth>
                <S.InfoLabel><FaIndustry /> Nh√† cung c·∫•p</S.InfoLabel>
                <S.InfoValue>
                  {part.supplier.supplierName || part.supplier.name || 'N/A'}
                  {part.supplier.supplierPhone && ` - ${part.supplier.supplierPhone}`}
                  {part.supplier.supplierEmail && ` - ${part.supplier.supplierEmail}`}
                </S.InfoValue>
              </S.InfoItem>
            )}
          </S.PartGrid>
        </S.PartCard>
      )}
    </S.PageContainer>
  );
};

export default PartsLookup;
