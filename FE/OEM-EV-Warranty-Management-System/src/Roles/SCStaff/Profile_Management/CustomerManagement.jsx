// ===========================================================================================
// PH·∫¶N 1: IMPORT C√ÅC TH∆Ø VI·ªÜN V√Ä COMPONENTS C·∫¶N THI·∫æT
// ===========================================================================================

import React, { useState, useEffect } from 'react'; // React hooks ƒë·ªÉ qu·∫£n l√Ω state v√† lifecycle
import { useNavigate, useLocation } from 'react-router-dom'; // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng gi·ªØa c√°c trang
import { 
  FaUsers,        // Icon nh√≥m ng∆∞·ªùi (cho ti√™u ƒë·ªÅ)
  FaPlus,         // Icon d·∫•u c·ªông (th√™m m·ªõi)
  FaEdit,         // Icon b√∫t ch√¨ (ch·ªânh s·ª≠a)
  FaEye,          // Icon m·∫Øt (xem chi ti·∫øt)
  FaSearch,       // Icon k√≠nh l√∫p (t√¨m ki·∫øm)
  FaUserPlus,     // Icon th√™m ng∆∞·ªùi d√πng
  FaArrowLeft,    // Icon m≈©i t√™n quay l·∫°i
  FaPhone,        // Icon ƒëi·ªán tho·∫°i
  FaEnvelope,     // Icon th∆∞ (email)
  FaMapMarkerAlt, // Icon v·ªã tr√≠ (ƒë·ªãa ch·ªâ)
  FaCalendar,     // Icon l·ªãch (ng√†y t·∫°o)
  FaCheckCircle,  // Icon d·∫•u t√≠ch (th√†nh c√¥ng)
  FaSpinner       // Icon loading xoay tr√≤n
} from 'react-icons/fa';

// ===========================================================================================
// PH·∫¶N 2: COMPONENT CH√çNH V√Ä KHAI B√ÅO C√ÅC STATE
// ===========================================================================================

const CustomerManagement = () => {
  // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng trang
  const navigate = useNavigate();
  const location = useLocation();
  
  // L·∫•y userId v√† c√°c th√¥ng tin t·ª´ navigation state (t·ª´ trang t·∫°o t√†i kho·∫£n)
  const { userId, fromAccountCreation, openCreateForm } = location.state || {};
  
  // ===== C√ÅC STATE QU·∫¢N L√ù D·ªÆ LI·ªÜU KH√ÅCH H√ÄNG =====
  const [customers, setCustomers] = useState([]);              // Danh s√°ch kh√°ch h√†ng
  const [loading, setLoading] = useState(true);                // Tr·∫°ng th√°i loading khi fetch data
  
  // ===== C√ÅC STATE QU·∫¢N L√ù T√åM KI·∫æM =====
  const [searchTerm, setSearchTerm] = useState('');            // T·ª´ kh√≥a t√¨m ki·∫øm
  const [searchType, setSearchType] = useState('name');        // Lo·∫°i t√¨m ki·∫øm: name, email, phone
  
  // ===== C√ÅC STATE QU·∫¢N L√ù PH√ÇN TRANG =====
  const [currentPage, setCurrentPage] = useState(0);          // Trang hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 0)
  const [pageSize, setPageSize] = useState(10);               // S·ªë item m·ªói trang
  const [totalPages, setTotalPages] = useState(0);            // T·ªïng s·ªë trang
  const [totalElements, setTotalElements] = useState(0);      // T·ªïng s·ªë kh√°ch h√†ng
  
  // ===== C√ÅC STATE QU·∫¢N L√ù FORM =====
  const [showCreateForm, setShowCreateForm] = useState(false); // Hi·ªÉn th·ªã form t·∫°o/s·ª≠a
  const [selectedCustomer, setSelectedCustomer] = useState(null); // Kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ s·ª≠a
  
  // State ch·ª©a d·ªØ li·ªáu form
  const [formData, setFormData] = useState({
    name: '',     // T√™n kh√°ch h√†ng
    email: '',    // Email kh√°ch h√†ng
    phone: '',    // S·ªë ƒëi·ªán tho·∫°i
    address: '',  // ƒê·ªãa ch·ªâ
    userId: ''    // ID ng∆∞·ªùi d√πng li√™n k·∫øt
  });
  
  // State ch·ª©a l·ªói validation
  const [formErrors, setFormErrors] = useState({});

  // ===========================================================================================
  // PH·∫¶N 3: D·ªÆ LI·ªÜU MOCK - D·ªÆ LI·ªÜU M·∫™U CHO DEMO
  // ===========================================================================================
  
  // D·ªØ li·ªáu kh√°ch h√†ng m·∫´u ƒë·ªÉ test khi API kh√¥ng ho·∫°t ƒë·ªông
  const mockCustomers = [
    {
      customerId: "123e4567-e89b-12d3-a456-426614174000",
      name: "Nguy·ªÖn VƒÉn An",
      email: "nguyen.van.an@email.com",
      phone: "+84901234567",
      address: "123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM",
      createdAt: "2024-01-15T10:30:00.000+00:00",
      userId: 5,
      username: "nguyen_van_an"
    },
    {
      customerId: "456e7890-e89b-12d3-a456-426614174001",
      name: "Tr·∫ßn Th·ªã B√¨nh",
      email: "tran.thi.binh@email.com",
      phone: "+84901234568",
      address: "456 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 3, TP.HCM",
      createdAt: "2024-02-10T09:15:00.000+00:00",
      userId: 6,
      username: "tran_thi_binh"
    },
    {
      customerId: "789e1234-e89b-12d3-a456-426614174002",
      name: "L√™ VƒÉn C∆∞·ªùng",
      email: "le.van.cuong@email.com",
      phone: "+84901234569",
      address: "789 ƒê∆∞·ªùng Pasteur, Qu·∫≠n 1, TP.HCM",
      createdAt: "2024-03-05T14:20:00.000+00:00",
      userId: 7,
      username: "le_van_cuong"
    }
  ];

  // ===========================================================================================
  // PH·∫¶N 4: USEEFFECT - T·∫¢I D·ªÆ LI·ªÜU KHI COMPONENT MOUNT V√Ä KHI THAY ƒê·ªîI TRANG
  // ===========================================================================================
  
  // G·ªçi API l·∫•y danh s√°ch kh√°ch h√†ng khi component mount ho·∫∑c khi thay ƒë·ªïi trang/pageSize
  useEffect(() => {
    fetchCustomers();
  }, [currentPage, pageSize]); // Dependencies: ch·∫°y l·∫°i khi currentPage ho·∫∑c pageSize thay ƒë·ªïi

  // X·ª≠ l√Ω khi c√≥ userId t·ª´ trang t·∫°o t√†i kho·∫£n
  useEffect(() => {
    if (fromAccountCreation && userId && openCreateForm) {
      console.log('üîó Received userId from account creation:', userId);
      setShowCreateForm(true);
      setFormData(prev => ({
        ...prev,
        userId: userId.toString()
      }));
    }
  }, [fromAccountCreation, userId, openCreateForm]);

  // ===========================================================================================
  // PH·∫¶N 5: H√ÄM FETCH CUSTOMERS - L·∫§Y DANH S√ÅCH KH√ÅCH H√ÄNG T·ª™ API
  // ===========================================================================================
  
  const fetchCustomers = async () => {
    try {
      setLoading(true); // B·∫≠t tr·∫°ng th√°i loading
      const token = localStorage.getItem('token'); // L·∫•y token x√°c th·ª±c
      
      // ===== KI·ªÇM TRA TOKEN =====
      if (!token) {
        console.error('No token found');
        // Fallback: s·ª≠ d·ª•ng d·ªØ li·ªáu mock khi kh√¥ng c√≥ token
        setCustomers(mockCustomers);
        setTotalElements(mockCustomers.length);
        setTotalPages(1);
        setLoading(false);
        return;
      }

      // ===== X√ÇY D·ª∞NG URL API D·ª∞A TR√äN LO·∫†I T√åM KI·∫æM =====
      const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
      let url = `${API_BASE_URL}/api/customers?page=${currentPage}&size=${pageSize}`;
      
      // N·∫øu c√≥ t·ª´ kh√≥a t√¨m ki·∫øm, thay ƒë·ªïi URL t∆∞∆°ng ·ª©ng
      if (searchTerm) {
        if (searchType === 'name') {
          url = `${API_BASE_URL}/api/customers/search?name=${encodeURIComponent(searchTerm)}&page=${currentPage}&size=${pageSize}`;
        } else if (searchType === 'email') {
          url = `${API_BASE_URL}/api/customers/by-email?email=${encodeURIComponent(searchTerm)}`;
        } else if (searchType === 'phone') {
          url = `${API_BASE_URL}/api/customers/by-phone?phone=${encodeURIComponent(searchTerm)}`;
        }
      }

      console.log('üîç Fetching customers from:', url);

      // ===== G·ª¨I REQUEST T·ªöI API =====
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`, // Th√™m token ƒë·ªÉ x√°c th·ª±c
          'Content-Type': 'application/json'
        }
      });

      // ===== X·ª¨ L√ù RESPONSE TH√ÄNH C√îNG =====
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Customers fetched:', data);
        
        // X·ª≠ l√Ω d·ªØ li·ªáu response kh√°c nhau cho t·ª´ng lo·∫°i t√¨m ki·∫øm
        if (searchType === 'email' || searchType === 'phone') {
          // Response tr·∫£ v·ªÅ 1 kh√°ch h√†ng duy nh·∫•t (search by email/phone)
          setCustomers([data]);
          setTotalElements(1);
          setTotalPages(1);
        } else {
          // Response tr·∫£ v·ªÅ d·ªØ li·ªáu ph√¢n trang (search by name ho·∫∑c get all)
          setCustomers(data.content || []);
          setTotalElements(data.totalElements || 0);
          setTotalPages(data.totalPages || 1);
        }
      } else {
        // ===== X·ª¨ L√ù KHI API TR·∫¢ V·ªÄ L·ªñI =====
        console.error('Failed to fetch customers:', response.status);
        // Fallback: s·ª≠ d·ª•ng d·ªØ li·ªáu mock
        setCustomers(mockCustomers);
        setTotalElements(mockCustomers.length);
        setTotalPages(1);
      }
    } catch (error) {
      // ===== X·ª¨ L√ù L·ªñI NETWORK/CONNECTION =====
      console.error('Error fetching customers:', error);
      // Fallback: s·ª≠ d·ª•ng d·ªØ li·ªáu mock
      setCustomers(mockCustomers);
      setTotalElements(mockCustomers.length);
      setTotalPages(1);
    } finally {
      // ===== LU√îN T·∫ÆT LOADING SAU KHI XONG =====
      setLoading(false);
    }
  };

  // ===========================================================================================
  // PH·∫¶N 6: C√ÅC H√ÄM X·ª¨ L√ù T√åM KI·∫æM
  // ===========================================================================================
  
  // Th·ª±c hi·ªán t√¨m ki·∫øm (reset v·ªÅ trang ƒë·∫ßu v√† g·ªçi l·∫°i API)
  const handleSearch = () => {
    setCurrentPage(0);  // Reset v·ªÅ trang ƒë·∫ßu ti√™n
    fetchCustomers();   // G·ªçi l·∫°i API v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm
  };

  // X√≥a t·ª´ kh√≥a t√¨m ki·∫øm v√† load l·∫°i to√†n b·ªô d·ªØ li·ªáu
  const clearSearch = () => {
    setSearchTerm('');    // X√≥a t·ª´ kh√≥a
    setCurrentPage(0);    // Reset v·ªÅ trang ƒë·∫ßu
    fetchCustomers();     // Load l·∫°i to√†n b·ªô d·ªØ li·ªáu
  };

  // ===========================================================================================
  // PH·∫¶N 7: H√ÄM X·ª¨ L√ù T·∫†O/CH·ªàNH S·ª¨A KH√ÅCH H√ÄNG
  // ===========================================================================================
  
  const handleCreateCustomer = async (e) => {
    e.preventDefault(); // NgƒÉn form reload trang
    
    // ===== B∆Ø·ªöC 1: VALIDATE D·ªÆ LI·ªÜU =====
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return; // D·ª´ng l·∫°i n·∫øu c√≥ l·ªói validation
    }

    try {
      const token = localStorage.getItem('token');
      const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

      // ===== B∆Ø·ªöC 2: PH√ÇN BI·ªÜT T·∫†O M·ªöI V√Ä CH·ªàNH S·ª¨A =====
      const isEditing = selectedCustomer !== null;
      const url = isEditing 
        ? `${API_BASE_URL}/api/customers/${selectedCustomer.customerId}`
        : `${API_BASE_URL}/api/customers`;
      const method = isEditing ? 'PUT' : 'POST';

      // ===== B∆Ø·ªöC 3: G·ª¨I REQUEST =====
      const response = await fetch(url, {
        method: method,
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(formData) // G·ª≠i d·ªØ li·ªáu form d∆∞·ªõi d·∫°ng JSON
      });

      // ===== B∆Ø·ªöC 4: X·ª¨ L√ù RESPONSE TH√ÄNH C√îNG =====
      if (response.ok) {
        const customerData = await response.json();
        console.log(`‚úÖ Customer ${isEditing ? 'updated' : 'created'}:`, customerData);
        
        if (isEditing) {
          // C·∫≠p nh·∫≠t kh√°ch h√†ng trong danh s√°ch
          setCustomers(prev => prev.map(customer => 
            customer.customerId === selectedCustomer.customerId 
              ? { ...customerData, customerId: selectedCustomer.customerId, createdAt: selectedCustomer.createdAt }
              : customer
          ));
          alert('Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
        } else {
          // Th√™m kh√°ch h√†ng m·ªõi v√†o ƒë·∫ßu danh s√°ch
          setCustomers(prev => [customerData, ...prev]);
          setTotalElements(prev => prev + 1);
          alert('Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
        }
        
        // Reset form sau khi ho√†n th√†nh
        setFormData({ name: '', email: '', phone: '', address: '', userId: '' });
        setSelectedCustomer(null);
        setShowCreateForm(false);
        
      } else {
        // ===== B∆Ø·ªöC 5: X·ª¨ L√ù L·ªñI T·ª™ API =====
        const error = await response.json();
        alert(`${isEditing ? 'C·∫≠p nh·∫≠t' : 'T·∫°o'} kh√°ch h√†ng th·∫•t b·∫°i: ${error.message || 'Unknown error'}`);
      }
    } catch (error) {
      // ===== B∆Ø·ªöC 6: X·ª¨ L√ù L·ªñI NETWORK =====
      console.error(`Error ${selectedCustomer ? 'updating' : 'creating'} customer:`, error);
      alert(`L·ªói khi ${selectedCustomer ? 'c·∫≠p nh·∫≠t' : 't·∫°o'} kh√°ch h√†ng. Vui l√≤ng th·ª≠ l·∫°i.`);
    }
  };

  // ===========================================================================================
  // PH·∫¶N 8: H√ÄM VALIDATION FORM - KI·ªÇM TRA D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO
  // ===========================================================================================
  
  const validateForm = () => {
    const errors = {};
    
    // ===== VALIDATION CHO T√äN KH√ÅCH H√ÄNG =====
    if (!formData.name.trim()) {
      errors.name = 'T√™n kh√°ch h√†ng l√† b·∫Øt bu·ªôc';
    }
    
    // ===== VALIDATION CHO EMAIL =====
    if (!formData.email.trim()) {
      errors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }
    
    // ===== VALIDATION CHO S·ªê ƒêI·ªÜN THO·∫†I =====
    if (!formData.phone.trim()) {
      errors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^(\+84|0)[0-9]{9,10}$/.test(formData.phone.replace(/\s/g, ''))) {
      errors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }
    
    // ===== VALIDATION CHO ƒê·ªäA CH·ªà =====
    if (!formData.address.trim()) {
      errors.address = 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc';
    }
    
    return errors; // Tr·∫£ v·ªÅ object ch·ª©a c√°c l·ªói
  };

  // ===========================================================================================
  // PH·∫¶N 9: H√ÄM X·ª¨ L√ù CH·ªàNH S·ª¨A KH√ÅCH H√ÄNG
  // ===========================================================================================
  
  // M·ªü form ch·ªânh s·ª≠a v·ªõi d·ªØ li·ªáu c·ªßa kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn
  const handleEdit = (customer) => {
    setSelectedCustomer(customer);          // L∆∞u kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn
    // ƒêi·ªÅn d·ªØ li·ªáu kh√°ch h√†ng v√†o form
    setFormData({
      name: customer.name,
      email: customer.email,
      phone: customer.phone,
      address: customer.address,
      userId: customer.userId
    });
    setShowCreateForm(true);               // Hi·ªÉn th·ªã form (d√πng chung form create/edit)
  };



  // ===========================================================================================
  // PH·∫¶N 11: H√ÄM TI·ªÜN √çCH - FORMAT NG√ÄY TH√ÅNG
  // ===========================================================================================
  
  // Chuy·ªÉn ƒë·ªïi string ISO date th√†nh ƒë·ªãnh d·∫°ng ng√†y th√°ng Vi·ªát Nam
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',    // NƒÉm ƒë·∫ßy ƒë·ªß (VD: 2024)
      month: '2-digit',   // Th√°ng 2 ch·ªØ s·ªë (VD: 01, 12)
      day: '2-digit',     // Ng√†y 2 ch·ªØ s·ªë (VD: 05, 25)
      hour: '2-digit',    // Gi·ªù 2 ch·ªØ s·ªë (VD: 09, 14)
      minute: '2-digit'   // Ph√∫t 2 ch·ªØ s·ªë (VD: 30, 45)
    });
  };

  // ===========================================================================================
  // PH·∫¶N 12: RENDER UI - HI·ªÇN TH·ªä GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG
  // ===========================================================================================
  
  return (
    // Container ch√≠nh v·ªõi background gradient
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
      padding: '20px'
    }}>
      <div style={{ maxWidth: '1200px', margin: 'auto' }}>
        
        {/* ===== HEADER SECTION - TI√äU ƒê·ªÄ V√Ä C√ÅC N√öT H√ÄNH ƒê·ªòNG ===== */}
        <div style={{
          background: '#fff',
          borderRadius: '12px',
          padding: '24px',
          marginBottom: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
        }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
              {/* N√∫t quay l·∫°i Dashboard */}
              <button
                onClick={() => navigate('/scstaff/dashboard')}
                style={{
                  background: '#6b7280',
                  color: 'white',
                  border: 'none',
                  padding: '8px 12px',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px'
                }}
              >
                <FaArrowLeft /> Quay l·∫°i
              </button>
              {/* Ti√™u ƒë·ªÅ v√† m√¥ t·∫£ trang */}
              <div>
                <h1 style={{ margin: 0, color: '#1f2937', display: 'flex', alignItems: 'center', gap: '12px' }}>
                  <FaUsers style={{ color: '#3b82f6' }} />
                  Qu·∫£n l√Ω Profile Kh√°ch h√†ng
                </h1>
                <p style={{ margin: '4px 0 0 0', color: '#6b7280' }}>
                  Qu·∫£n l√Ω th√¥ng tin kh√°ch h√†ng c·ªßa trung t√¢m d·ªãch v·ª•
                </p>
              </div>
            </div>
            {/* N√∫t t·∫°o kh√°ch h√†ng m·ªõi */}
            <button
              onClick={() => {
                setShowCreateForm(true);           // Hi·ªÉn th·ªã form
                setSelectedCustomer(null);         // Reset customer ƒë∆∞·ª£c ch·ªçn (ƒë·ªÉ bi·∫øt l√† t·∫°o m·ªõi)
                setFormData({ name: '', email: '', phone: '', address: '', userId: '' }); // Reset form data
              }}
              style={{
                background: '#10b981',
                color: 'white',
                border: 'none',
                padding: '12px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                fontSize: '14px',
                fontWeight: '500'
              }}
            >
              <FaUserPlus /> T·∫°o kh√°ch h√†ng m·ªõi
            </button>
          </div>

          {/* Success notification when coming from account creation */}
          {fromAccountCreation && userId && (
            <div style={{
              background: '#10b981',
              color: 'white',
              padding: '12px 16px',
              borderRadius: '8px',
              marginTop: '16px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              border: '1px solid #059669'
            }}>
              <FaCheckCircle />
              <span>
                T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi User ID: <strong>{userId}</strong>. 
                Vui l√≤ng ƒëi·ªÅn th√¥ng tin kh√°ch h√†ng b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t h·ªì s∆°.
              </span>
            </div>
          )}

          {/* ===== SEARCH SECTION - PH·∫¶N T√åM KI·∫æM ===== */}
          <div style={{
            display: 'flex',
            gap: '12px',
            alignItems: 'center',
            flexWrap: 'wrap'
          }}>
            {/* Dropdown ch·ªçn lo·∫°i t√¨m ki·∫øm */}
            <select
              value={searchType}
              onChange={(e) => setSearchType(e.target.value)}
              style={{
                padding: '8px 12px',
                border: '1px solid #d1d5db',
                borderRadius: '6px',
                background: 'white'
              }}
            >
              <option value="name">T√¨m theo t√™n</option>
              <option value="email">T√¨m theo email</option>
              <option value="phone">T√¨m theo SƒêT</option>
            </select>
            {/* Input nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm */}
            <input
              type="text"
              placeholder={`Nh·∫≠p ${searchType === 'name' ? 't√™n kh√°ch h√†ng' : searchType === 'email' ? 'email' : 's·ªë ƒëi·ªán tho·∫°i'}...`}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{
                padding: '8px 12px',
                border: '1px solid #d1d5db',
                borderRadius: '6px',
                minWidth: '250px'
              }}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()} // Cho ph√©p search b·∫±ng Enter
            />
            {/* N√∫t t√¨m ki·∫øm */}
            <button
              onClick={handleSearch}
              style={{
                background: '#3b82f6',
                color: 'white',
                border: 'none',
                padding: '8px 16px',
                borderRadius: '6px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '6px'
              }}
            >
              <FaSearch /> T√¨m ki·∫øm
            </button>
            {/* N√∫t x√≥a b·ªô l·ªçc (ch·ªâ hi·ªán khi c√≥ t·ª´ kh√≥a) */}
            {searchTerm && (
              <button
                onClick={clearSearch}
                style={{
                  background: '#6b7280',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                X√≥a b·ªô l·ªçc
              </button>
            )}
          </div>

          {/* ===== STATS SECTION - TH·ªêNG K√ä S·ªê LI·ªÜU ===== */}
          <div style={{
            display: 'flex',
            gap: '16px',
            marginTop: '16px',
            fontSize: '14px',
            color: '#6b7280'
          }}>
            <span>T·ªïng s·ªë kh√°ch h√†ng: <strong>{totalElements}</strong></span>
            <span>Trang {currentPage + 1} / {totalPages}</span>
          </div>
        </div>

        {/* ===== CUSTOMER LIST SECTION - DANH S√ÅCH KH√ÅCH H√ÄNG ===== */}
        {loading ? (
          // Hi·ªÉn th·ªã loading spinner khi ƒëang t·∫£i d·ªØ li·ªáu
          <div style={{
            background: 'white',
            borderRadius: '12px',
            padding: '40px',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
          }}>
            <FaSpinner style={{ fontSize: '24px', color: '#3b82f6', animation: 'spin 1s linear infinite' }} />
            <p style={{ marginTop: '12px', color: '#6b7280' }}>ƒêang t·∫£i danh s√°ch kh√°ch h√†ng...</p>
          </div>
        ) : customers.length === 0 ? (
          // Hi·ªÉn th·ªã empty state khi kh√¥ng c√≥ kh√°ch h√†ng
          <div style={{
            background: 'white',
            borderRadius: '12px',
            padding: '40px',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
          }}>
            <FaUsers style={{ fontSize: '48px', color: '#d1d5db', marginBottom: '16px' }} />
            <h3 style={{ color: '#374151', marginBottom: '8px' }}>Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng</h3>
            <p style={{ color: '#6b7280', marginBottom: '20px' }}>
              {searchTerm ? 'Kh√¥ng c√≥ kh√°ch h√†ng n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm.' : 'Ch∆∞a c√≥ kh√°ch h√†ng n√†o trong h·ªá th·ªëng.'}
            </p>
            <button
              onClick={() => setShowCreateForm(true)}
              style={{
                background: '#10b981',
                color: 'white',
                border: 'none',
                padding: '12px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                display: 'inline-flex',
                alignItems: 'center',
                gap: '8px'
              }}
            >
              <FaUserPlus /> T·∫°o kh√°ch h√†ng ƒë·∫ßu ti√™n
            </button>
          </div>
        ) : (
          // Hi·ªÉn th·ªã b·∫£ng danh s√°ch kh√°ch h√†ng
          <div style={{
            background: 'white',
            borderRadius: '12px',
            overflow: 'hidden',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
          }}>
            <div style={{ overflowX: 'auto' }}>
              {/* ===== TABLE HEADER - TI√äU ƒê·ªÄ B·∫¢NG ===== */}
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ background: '#f8fafc', borderBottom: '1px solid #e5e7eb' }}>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', color: '#374151' }}>
                      Th√¥ng tin kh√°ch h√†ng
                    </th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', color: '#374151' }}>
                      Li√™n h·ªá
                    </th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', color: '#374151' }}>
                      ƒê·ªãa ch·ªâ
                    </th>
                    <th style={{ padding: '16px', textAlign: 'left', fontWeight: '600', color: '#374151' }}>
                      Ng√†y t·∫°o
                    </th>
                    <th style={{ padding: '16px', textAlign: 'center', fontWeight: '600', color: '#374151' }}>
                      Thao t√°c
                    </th>
                  </tr>
                </thead>
                {/* ===== TABLE BODY - N·ªòI DUNG B·∫¢NG ===== */}
                <tbody>
                  {customers.map((customer, index) => (
                    // M·ªói h√†ng trong b·∫£ng ƒë·∫°i di·ªán cho 1 kh√°ch h√†ng
                    <tr 
                      key={customer.customerId} 
                      style={{ 
                        borderBottom: index < customers.length - 1 ? '1px solid #f3f4f6' : 'none',
                        '&:hover': { background: '#f9fafb' }
                      }}
                    >
                      {/* C·ªôt th√¥ng tin kh√°ch h√†ng */}
                      <td style={{ padding: '16px' }}>
                        <div>
                          <div style={{ fontWeight: '500', color: '#111827', marginBottom: '4px' }}>
                            {customer.name}
                          </div>
                          <div style={{ fontSize: '12px', color: '#6b7280' }}>
                            ID: {customer.customerId?.substring(0, 8)}...
                          </div>
                          <div style={{ fontSize: '12px', color: '#6b7280' }}>
                            User ID: {customer.userId} ({customer.username})
                          </div>
                        </div>
                      </td>
                      {/* C·ªôt th√¥ng tin li√™n h·ªá */}
                      <td style={{ padding: '16px' }}>
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '6px', fontSize: '14px' }}>
                            <FaEnvelope style={{ color: '#6b7280', fontSize: '12px' }} />
                            {customer.email}
                          </div>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '6px', fontSize: '14px' }}>
                            <FaPhone style={{ color: '#6b7280', fontSize: '12px' }} />
                            {customer.phone}
                          </div>
                        </div>
                      </td>
                      {/* C·ªôt ƒë·ªãa ch·ªâ */}
                      <td style={{ padding: '16px' }}>
                        <div style={{ display: 'flex', alignItems: 'flex-start', gap: '6px', fontSize: '14px' }}>
                          <FaMapMarkerAlt style={{ color: '#6b7280', fontSize: '12px', marginTop: '2px' }} />
                          <span style={{ lineHeight: '1.4' }}>{customer.address}</span>
                        </div>
                      </td>
                      {/* C·ªôt ng√†y t·∫°o */}
                      <td style={{ padding: '16px' }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '6px', fontSize: '14px', color: '#6b7280' }}>
                          <FaCalendar style={{ fontSize: '12px' }} />
                          {formatDate(customer.createdAt)}
                        </div>
                      </td>
                      {/* C·ªôt c√°c n√∫t thao t√°c */}
                      <td style={{ padding: '16px', textAlign: 'center' }}>
                        <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>
                          {/* N√∫t ch·ªânh s·ª≠a */}
                          <button
                            onClick={() => handleEdit(customer)}
                            style={{
                              background: '#f59e0b',
                              color: 'white',
                              border: 'none',
                              padding: '6px 8px',
                              borderRadius: '4px',
                              cursor: 'pointer',
                              fontSize: '12px'
                            }}
                            title="Ch·ªânh s·ª≠a"
                          >
                            <FaEdit />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* ===== PAGINATION SECTION - PH√ÇN TRANG ===== */}
            {totalPages > 1 && (
              <div style={{
                padding: '16px',
                borderTop: '1px solid #e5e7eb',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                {/* Th√¥ng tin s·ªë l∆∞·ª£ng hi·ªÉn th·ªã */}
                <div style={{ fontSize: '14px', color: '#6b7280' }}>
                  Hi·ªÉn th·ªã {currentPage * pageSize + 1} - {Math.min((currentPage + 1) * pageSize, totalElements)} c·ªßa {totalElements} kh√°ch h√†ng
                </div>
                {/* C√°c n√∫t ƒëi·ªÅu h∆∞·ªõng ph√¢n trang */}
                <div style={{ display: 'flex', gap: '8px' }}>
                  <button
                    onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}
                    disabled={currentPage === 0}
                    style={{
                      padding: '6px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '4px',
                      background: currentPage === 0 ? '#f9fafb' : 'white',
                      cursor: currentPage === 0 ? 'not-allowed' : 'pointer'
                    }}
                  >
                    Tr∆∞·ªõc
                  </button>
                  <span style={{ padding: '6px 12px', color: '#374151' }}>
                    {currentPage + 1} / {totalPages}
                  </span>
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}
                    disabled={currentPage >= totalPages - 1}
                    style={{
                      padding: '6px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '4px',
                      background: currentPage >= totalPages - 1 ? '#f9fafb' : 'white',
                      cursor: currentPage >= totalPages - 1 ? 'not-allowed' : 'pointer'
                    }}
                  >
                    Sau
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* ===== CREATE/EDIT FORM MODAL - FORM T·∫†O/CH·ªàNH S·ª¨A KH√ÅCH H√ÄNG ===== */}
        {showCreateForm && (
          // Overlay che m√†n h√¨nh
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.5)', // N·ªÅn ƒëen m·ªù
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000 // Hi·ªÉn th·ªã tr√™n c√πng
          }}>
            {/* Modal content */}
            <div style={{
              background: 'white',
              borderRadius: '12px',
              padding: '24px',
              width: '500px',
              maxWidth: '90vw',
              maxHeight: '90vh',
              overflow: 'auto'
            }}>
              {/* Ti√™u ƒë·ªÅ form */}
              <h2 style={{ marginBottom: '20px', color: '#1f2937' }}>
                {selectedCustomer ? 'Ch·ªânh s·ª≠a kh√°ch h√†ng' : 'T·∫°o kh√°ch h√†ng m·ªõi'}
              </h2>
              
              <form onSubmit={handleCreateCustomer}>
                {/* ===== TR∆Ø·ªúNG T√äN KH√ÅCH H√ÄNG ===== */}
                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#374151' }}>
                    T√™n kh√°ch h√†ng *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 12px',
                      border: formErrors.name ? '1px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: '6px',
                      boxSizing: 'border-box'
                    }}
                    placeholder="Nh·∫≠p t√™n kh√°ch h√†ng"
                  />
                  {formErrors.name && (
                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#ef4444' }}>
                      {formErrors.name}
                    </p>
                  )}
                </div>

                {/* ===== TR∆Ø·ªúNG EMAIL ===== */}
                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#374151' }}>
                    Email *
                  </label>
                  <input
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 12px',
                      border: formErrors.email ? '1px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: '6px',
                      boxSizing: 'border-box'
                    }}
                    placeholder="Nh·∫≠p email"
                  />
                  {formErrors.email && (
                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#ef4444' }}>
                      {formErrors.email}
                    </p>
                  )}
                </div>

                {/* ===== TR∆Ø·ªúNG S·ªê ƒêI·ªÜN THO·∫†I ===== */}
                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#374151' }}>
                    S·ªë ƒëi·ªán tho·∫°i *
                  </label>
                  <input
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 12px',
                      border: formErrors.phone ? '1px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: '6px',
                      boxSizing: 'border-box'
                    }}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (+84...)"
                  />
                  {formErrors.phone && (
                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#ef4444' }}>
                      {formErrors.phone}
                    </p>
                  )}
                </div>

                {/* ===== TR∆Ø·ªúNG ƒê·ªäA CH·ªà ===== */}
                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#374151' }}>
                    ƒê·ªãa ch·ªâ *
                  </label>
                  <textarea
                    value={formData.address}
                    onChange={(e) => setFormData({...formData, address: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 12px',
                      border: formErrors.address ? '1px solid #ef4444' : '1px solid #d1d5db',
                      borderRadius: '6px',
                      boxSizing: 'border-box',
                      minHeight: '80px',
                      resize: 'vertical'
                    }}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                  />
                  {formErrors.address && (
                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#ef4444' }}>
                      {formErrors.address}
                    </p>
                  )}
                </div>

                {/* ===== TR∆Ø·ªúNG USER ID (T√ôY CH·ªåN) ===== */}
                <div style={{ marginBottom: '24px' }}>
                  <label style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#374151' }}>
                    User ID (t√πy ch·ªçn)
                  </label>
                  <input
                    type="number"
                    value={formData.userId}
                    onChange={(e) => setFormData({...formData, userId: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      boxSizing: 'border-box'
                    }}
                    placeholder="Nh·∫≠p User ID li√™n k·∫øt"
                  />
                </div>

                {/* ===== C√ÅC N√öT H√ÄNH ƒê·ªòNG ===== */}
                <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
                  {/* N√∫t H·ªßy */}
                  <button
                    type="button"
                    onClick={() => {
                      setShowCreateForm(false);        // ƒê√≥ng form
                      setSelectedCustomer(null);       // Reset customer ƒë∆∞·ª£c ch·ªçn
                      setFormData({ name: '', email: '', phone: '', address: '', userId: '' }); // Reset form data
                      setFormErrors({});               // Reset l·ªói
                    }}
                    style={{
                      padding: '10px 20px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      background: 'white',
                      cursor: 'pointer'
                    }}
                  >
                    H·ªßy
                  </button>
                  {/* N√∫t Submit */}
                  <button
                    type="submit"
                    style={{
                      padding: '10px 20px',
                      border: 'none',
                      borderRadius: '6px',
                      background: '#10b981',
                      color: 'white',
                      cursor: 'pointer',
                      fontWeight: '500'
                    }}
                  >
                    {selectedCustomer ? 'C·∫≠p nh·∫≠t' : 'T·∫°o m·ªõi'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CustomerManagement;