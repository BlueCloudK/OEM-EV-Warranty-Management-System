// ===========================================================================================
// PH·∫¶N 1: IMPORT C√ÅC TH∆Ø VI·ªÜN V√Ä COMPONENTS C·∫¶N THI·∫æT
// ===========================================================================================

import React, { useState } from 'react'; // React hook ƒë·ªÉ qu·∫£n l√Ω state
import { useNavigate } from 'react-router-dom'; // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng gi·ªØa c√°c trang
import { 
  FaUserPlus,     // Icon th√™m ng∆∞·ªùi d√πng
  FaArrowLeft,    // Icon m≈©i t√™n quay l·∫°i
  FaUser,         // Icon ng∆∞·ªùi d√πng (cho username)
  FaEnvelope,     // Icon th∆∞ (cho email)
  FaLock,         // Icon kh√≥a (cho password)
  FaMapMarkerAlt, // Icon v·ªã tr√≠ (cho ƒë·ªãa ch·ªâ)
  FaEye,          // Icon m·∫Øt m·ªü (hi·ªán password)
  FaEyeSlash,     // Icon m·∫Øt ƒë√≥ng (·∫©n password)
  FaSave,         // Icon l∆∞u
  FaSpinner       // Icon loading xoay tr√≤n
} from 'react-icons/fa';

// ===========================================================================================
// PH·∫¶N 2: COMPONENT CH√çNH V√Ä KHAI B√ÅO C√ÅC STATE
// ===========================================================================================

const CreateCustomerAccount = () => {
  // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng trang
  const navigate = useNavigate();
  
  // ===== C√ÅC STATE QU·∫¢N L√ù COMPONENT =====
  const [loading, setLoading] = useState(false);           // Tr·∫°ng th√°i loading khi submit form
  const [showPassword, setShowPassword] = useState(false); // ·∫®n/hi·ªán m·∫≠t kh·∫©u
  
  // State ch·ª©a d·ªØ li·ªáu form
  const [formData, setFormData] = useState({
    username: '',  // T√™n ƒëƒÉng nh·∫≠p
    email: '',     // Email kh√°ch h√†ng
    password: '',  // M·∫≠t kh·∫©u
    address: ''    // ƒê·ªãa ch·ªâ kh√°ch h√†ng
  });
  
  // State ch·ª©a l·ªói validation c·ªßa t·ª´ng field
  const [formErrors, setFormErrors] = useState({});
  
  // State theo d√µi tr·∫°ng th√°i submit: 'success'(th√†nh c√¥ng), 'error'(l·ªói), null(ch∆∞a submit)
  const [submitStatus, setSubmitStatus] = useState(null);
  
  // State l∆∞u tr·ªØ userId sau khi t·∫°o t√†i kho·∫£n th√†nh c√¥ng
  const [createdUserId, setCreatedUserId] = useState(null);

  // ===========================================================================================
  // PH·∫¶N 3: H√ÄM VALIDATION FORM - KI·ªÇM TRA D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO
  // ===========================================================================================
  
  const validateForm = () => {
    const errors = {};
    
    // ===== VALIDATION CHO USERNAME =====
    if (!formData.username.trim()) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p l√† b·∫Øt bu·ªôc';
    } else if (formData.username.length < 3) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    } else if (!/^[a-zA-Z0-9_-]+$/.test(formData.username)) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi v√† g·∫°ch ngang';
    }
    
    // ===== VALIDATION CHO EMAIL =====
    if (!formData.email.trim()) {
      errors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá';
    }
    
    // ===== VALIDATION CHO PASSWORD =====
    if (!formData.password) {
      errors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      errors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }
    
    // ===== VALIDATION CHO ADDRESS =====
    if (!formData.address.trim()) {
      errors.address = 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc';
    } else if (formData.address.length < 10) {
      errors.address = 'ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
    }
    
    return errors; // Tr·∫£ v·ªÅ object ch·ª©a c√°c l·ªói (n·∫øu c√≥)
  };

  // ===========================================================================================
  // PH·∫¶N 4: H√ÄM X·ª¨ L√ù SUBMIT FORM - G·ª¨I D·ªÆ LI·ªÜU L√äN SERVER
  // ===========================================================================================
  
  const handleSubmit = async (e) => {
    e.preventDefault(); // NgƒÉn form reload trang
    
    // ===== B∆Ø·ªöC 1: VALIDATE D·ªÆ LI·ªÜU =====
    const errors = validateForm();
    setFormErrors(errors);
    
    // N·∫øu c√≥ l·ªói th√¨ d·ª´ng l·∫°i, kh√¥ng submit
    if (Object.keys(errors).length > 0) {
      return;
    }

    // ===== B∆Ø·ªöC 2: B·∫ÆT ƒê·∫¶U QU·∫¢N L√ù LOADING STATE =====
    setLoading(true);        // B·∫≠t tr·∫°ng th√°i loading
    setSubmitStatus(null);   // Reset tr·∫°ng th√°i submit
    setCreatedUserId(null);  // Reset userId c≈©

    try {
      // ===== B∆Ø·ªöC 3: CHU·∫®N B·ªä V√Ä G·ª¨I REQUEST =====
      const API_BASE_URL = import.meta.env.VITE_API_BASE_URL; // L·∫•y URL API t·ª´ env
      const token = localStorage.getItem('token');             // L·∫•y token x√°c th·ª±c

      console.log('üîÑ Creating customer account:', {
        username: formData.username,
        email: formData.email,
        address: formData.address
      });

      // G·ª≠i POST request ƒë·ªÉ t·∫°o t√†i kho·∫£n
      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}` // Th√™m token ƒë·ªÉ x√°c th·ª±c
        },
        body: JSON.stringify(formData) // Chuy·ªÉn d·ªØ li·ªáu form th√†nh JSON
      });

      // ===== B∆Ø·ªöC 4: X·ª¨ L√ù RESPONSE TH√ÄNH C√îNG =====
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Customer account created successfully:', result);
        console.log('üîç Checking for userId in response:', {
          'result.userId': result.userId,
          'result.id': result.id,
          'result.user?.id': result.user?.id,
          'result.data?.id': result.data?.id,
          'result.data?.userId': result.data?.userId,
          'full result structure': result
        });
        
        setSubmitStatus('success'); // ƒê√°nh d·∫•u tr·∫°ng th√°i th√†nh c√¥ng
        
        // L∆∞u userId t·ª´ response ƒë·ªÉ chuy·ªÉn h∆∞·ªõng
        const extractUserId = (res) => {
          if (!res) return null;
          // Common shapes
          if (res.userId) return res.userId;
          if (res.id) return res.id;
          if (res.user && (res.user.id || res.user.userId)) return res.user.id || res.user.userId;
          if (res.data) {
            if (Array.isArray(res.data) && res.data.length > 0) {
              const first = res.data[0];
              if (first.id) return first.id;
              if (first.userId) return first.userId;
              if (first.user && (first.user.id || first.user.userId)) return first.user.id || first.user.userId;
            }
            if (res.data.id) return res.data.id;
            if (res.data.userId) return res.data.userId;
            if (res.data.user && (res.data.user.id || res.data.user.userId)) return res.data.user.id || res.data.user.userId;
          }
          if (res.payload && (res.payload.id || res.payload.userId)) return res.payload.id || res.payload.userId;
          return null;
        };

        let extractedUserId = extractUserId(result);
        // Normalize to string if present
        if (extractedUserId !== null && extractedUserId !== undefined) {
          extractedUserId = String(extractedUserId);
        } else {
          extractedUserId = null;
        }

        console.log('üÜî Extracted userId:', extractedUserId);
        setCreatedUserId(extractedUserId);
        
        // ===== RESET FORM SAU KHI T·∫†O TH√ÄNH C√îNG =====
        setFormData({
          username: '',
          email: '',
          password: '',
          address: ''
        });
        setFormErrors({});
        
        // ===== T·ª∞ ƒê·ªòNG CHUY·ªÇN H∆Ø·ªöNG ƒê·∫æN CUSTOMER MANAGEMENT SAU 3 GI√ÇY =====
        setTimeout(() => {
          if (extractedUserId) {
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang CustomerManagement v·ªõi userId (string)
            navigate('/scstaff/customers', { 
              state: { 
                userId: extractedUserId,
                fromAccountCreation: true,
                openCreateForm: true 
              } 
            });
          } else {
            // N·∫øu kh√¥ng c√≥ userId, quay v·ªÅ dashboard
            navigate('/scstaff');
          }
        }, 3000);
        
      } else {
        // ===== B∆Ø·ªöC 5: X·ª¨ L√ù L·ªñI T·ª™ SERVER =====
        const errorData = await response.json();
        console.error('‚ùå Failed to create customer account:', errorData);
        setSubmitStatus('error');
        
        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ t·ª´ API
        if (response.status === 400) {
          if (errorData.message?.includes('username')) {
            setFormErrors({ username: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i' });
          } else if (errorData.message?.includes('email')) {
            setFormErrors({ email: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
          } else {
            setFormErrors({ general: errorData.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' });
          }
        } else {
          setFormErrors({ general: 'C√≥ l·ªói x·∫£y ra khi t·∫°o t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.' });
        }
      }
    } catch (error) {
      // ===== B∆Ø·ªöC 6: X·ª¨ L√ù L·ªñI NETWORK/CONNECTION =====
      console.error('‚ùå Error creating customer account:', error);
      setSubmitStatus('error');
      setFormErrors({ general: 'L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.' });
    } finally {
      // ===== B∆Ø·ªöC 7: LU√îN T·∫ÆT LOADING SAU KHI XONG =====
      setLoading(false);
    }
  };

  // ===========================================================================================
  // PH·∫¶N 5: H√ÄM X·ª¨ L√ù THAY ƒê·ªîI INPUT - C·∫¨P NH·∫¨T FORM DATA
  // ===========================================================================================
  
  const handleInputChange = (field, value) => {
    // C·∫≠p nh·∫≠t gi√° tr·ªã trong formData cho field t∆∞∆°ng ·ª©ng
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // X√≥a l·ªói c·ªßa field n√†y khi user b·∫Øt ƒë·∫ßu nh·∫≠p (ƒë·ªÉ UX m∆∞·ª£t m√† h∆°n)
    if (formErrors[field]) {
      setFormErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  // ===========================================================================================
  // PH·∫¶N 6: H√ÄM T·∫†O USERNAME NG·∫™U NHI√äN - TI·ªÜN √çCH CHO USER
  // ===========================================================================================
  
  const generateRandomUsername = () => {
    // Danh s√°ch c√°c t√≠nh t·ª´ v√† danh t·ª´ ƒë·ªÉ t·∫°o username
    const adjectives = ['Smart', 'Quick', 'Bright', 'Cool', 'Fast', 'Sharp', 'Bold', 'Swift'];
    const nouns = ['User', 'Customer', 'Client', 'Member', 'Person', 'Guest'];
    const randomNumber = Math.floor(Math.random() * 1000); // S·ªë ng·∫´u nhi√™n 0-999
    
    // Ch·ªçn ng·∫´u nhi√™n 1 t√≠nh t·ª´ v√† 1 danh t·ª´
    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
    
    // Gh√©p th√†nh username: VD "SmartUser123"
    return `${randomAdjective}${randomNoun}${randomNumber}`;
  };

  // ===========================================================================================
  // PH·∫¶N 7: RENDER UI - HI·ªÇN TH·ªä GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG
  // ===========================================================================================
  
  return (
    // Container ch√≠nh v·ªõi background gradient v√† padding
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
      padding: '20px'
    }}>
      <div style={{ maxWidth: '800px', margin: 'auto' }}>
        
        {/* ===== HEADER SECTION - TI√äU ƒê·ªÄ V√Ä N√öT QUAY L·∫†I ===== */}
        <div style={{
          background: '#fff',
          borderRadius: '12px',
          padding: '24px',
          marginBottom: '24px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            {/* N√∫t quay l·∫°i Dashboard */}
            <button
              onClick={() => navigate('/scstaff')}
              style={{
                background: '#f3f4f6',
                color: '#374151',
                border: 'none',
                padding: '8px 12px',
                borderRadius: '6px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '6px'
              }}
            >
              <FaArrowLeft /> Quay l·∫°i Dashboard
            </button>
            {/* Ti√™u ƒë·ªÅ v√† m√¥ t·∫£ trang */}
            <div>
              <h1 style={{ margin: 0, color: '#1f2937', display: 'flex', alignItems: 'center', gap: '12px' }}>
                <FaUserPlus style={{ color: '#ef4444' }} />
                T·∫°o T√†i Kho·∫£n Kh√°ch H√†ng
              </h1>
              <p style={{ margin: '4px 0 0 0', color: '#6b7280' }}>
                T·∫°o t√†i kho·∫£n m·ªõi cho kh√°ch h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
              </p>
            </div>
          </div>
        </div>

        {/* ===== SUCCESS/ERROR MESSAGES - TH√îNG B√ÅO TR·∫†NG TH√ÅI ===== */}
        {submitStatus === 'success' && (
          <div style={{
            background: '#d1fae5',
            border: '1px solid #10b981',
            borderRadius: '8px',
            padding: '16px',
            marginBottom: '24px',
            color: '#065f46'
          }}>
            <div style={{ marginBottom: '8px' }}>
              <strong>‚úÖ Th√†nh c√¥ng!</strong> T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.
            </div>
            {createdUserId && (
              <div style={{ 
                background: '#ecfdf5', 
                padding: '12px', 
                borderRadius: '6px', 
                margin: '8px 0',
                border: '1px solid #22c55e' 
              }}>
                <strong style={{ color: '#16a34a' }}>userId: {createdUserId}</strong>
                <br />
                <span style={{ fontSize: '14px', color: '#15803d' }}>
                  ƒê√¢y l√† userId c·ªßa kh√°ch h√†ng d√πng ƒë·ªÉ t·∫°o th√¥ng tin kh√°ch h√†ng
                </span>
              </div>
            )}
            <div style={{ fontSize: '14px', marginTop: '8px' }}>
              üîÑ ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω kh√°ch h√†ng ƒë·ªÉ t·∫°o th√¥ng tin chi ti·∫øt trong 3 gi√¢y...
            </div>
            <div style={{ marginTop: '16px', display: 'flex', gap: '12px' }}>
              <button
                onClick={() => {
                  if (createdUserId) {
                    navigate('/scstaff/customers', { 
                      state: { 
                        userId: createdUserId,
                        fromAccountCreation: true,
                        openCreateForm: true 
                      } 
                    });
                  } else {
                    navigate('/scstaff/customers');
                  }
                }}
                style={{
                  background: '#10b981',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  fontWeight: '500',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px'
                }}
              >
                ‚û°Ô∏è ƒê·∫øn trang qu·∫£n l√Ω kh√°ch h√†ng ngay
              </button>
              <button
                onClick={() => navigate('/scstaff')}
                style={{
                  background: '#6b7280',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  fontWeight: '500',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px'
                }}
              >
                üè† V·ªÅ Dashboard
              </button>
            </div>
          </div>
        )}

        {/* Hi·ªÉn th·ªã l·ªói chung (n·∫øu c√≥) */}
        {formErrors.general && (
          <div style={{
            background: '#fee2e2',
            border: '1px solid #ef4444',
            borderRadius: '8px',
            padding: '16px',
            marginBottom: '24px',
            color: '#dc2626'
          }}>
            <strong>‚ùå L·ªói:</strong> {formErrors.general}
          </div>
        )}

        {/* ===== FORM SECTION - BI·ªÇU M·∫™U NH·∫¨P LI·ªÜU ===== */}
        <div style={{
          background: '#fff',
          borderRadius: '12px',
          padding: '32px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'
        }}>
          <form onSubmit={handleSubmit}>
            <div style={{ display: 'grid', gap: '24px' }}>
              
              {/* ===== USERNAME FIELD - TR∆Ø·ªúNG T√äN ƒêƒÇNG NH·∫¨P ===== */}
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: '600', 
                  color: '#374151',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}>
                  <FaUser style={{ color: '#6b7280' }} />
                  T√™n ƒëƒÉng nh·∫≠p *
                </label>
                <div style={{ position: 'relative' }}>
                  {/* Input cho username */}
                  <input
                    type="text"
                    value={formData.username}
                    onChange={(e) => handleInputChange('username', e.target.value)}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: formErrors.username ? '2px solid #ef4444' : '2px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      boxSizing: 'border-box'
                    }}
                    placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (v√≠ d·ª•: john_doe123)"
                  />
                  {/* N√∫t t·∫°o username ng·∫´u nhi√™n */}
                  <button
                    type="button"
                    onClick={() => handleInputChange('username', generateRandomUsername())}
                    style={{
                      position: 'absolute',
                      right: '8px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      background: '#f3f4f6',
                      border: 'none',
                      padding: '4px 8px',
                      borderRadius: '4px',
                      fontSize: '12px',
                      cursor: 'pointer',
                      color: '#6b7280'
                    }}
                  >
                    T·∫°o ng·∫´u nhi√™n
                  </button>
                </div>
                {/* Hi·ªÉn th·ªã l·ªói validation cho username (n·∫øu c√≥) */}
                {formErrors.username && (
                  <p style={{ color: '#ef4444', fontSize: '12px', margin: '4px 0 0 0' }}>
                    {formErrors.username}
                  </p>
                )}
              </div>

              {/* ===== EMAIL FIELD - TR∆Ø·ªúNG EMAIL ===== */}
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: '600', 
                  color: '#374151',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}>
                  <FaEnvelope style={{ color: '#6b7280' }} />
                  Email *
                </label>
                {/* Input cho email */}
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: formErrors.email ? '2px solid #ef4444' : '2px solid #d1d5db',
                    borderRadius: '8px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email (v√≠ d·ª•: khachhang@email.com)"
                />
                {/* Hi·ªÉn th·ªã l·ªói validation cho email (n·∫øu c√≥) */}
                {formErrors.email && (
                  <p style={{ color: '#ef4444', fontSize: '12px', margin: '4px 0 0 0' }}>
                    {formErrors.email}
                  </p>
                )}
              </div>

              {/* ===== PASSWORD FIELD - TR∆Ø·ªúNG M·∫¨T KH·∫®U ===== */}
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: '600', 
                  color: '#374151',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}>
                  <FaLock style={{ color: '#6b7280' }} />
                  M·∫≠t kh·∫©u *
                </label>
                <div style={{ position: 'relative' }}>
                  {/* Input cho password v·ªõi t√≠nh nƒÉng ·∫©n/hi·ªán */}
                  <input
                    type={showPassword ? 'text' : 'password'}
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    style={{
                      width: '100%',
                      padding: '12px',
                      paddingRight: '45px',
                      border: formErrors.password ? '2px solid #ef4444' : '2px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      boxSizing: 'border-box'
                    }}
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                  />
                  {/* N√∫t toggle ·∫©n/hi·ªán m·∫≠t kh·∫©u */}
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    style={{
                      position: 'absolute',
                      right: '12px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      background: 'none',
                      border: 'none',
                      cursor: 'pointer',
                      color: '#6b7280'
                    }}
                  >
                    {showPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
                {/* Hi·ªÉn th·ªã l·ªói validation cho password (n·∫øu c√≥) */}
                {formErrors.password && (
                  <p style={{ color: '#ef4444', fontSize: '12px', margin: '4px 0 0 0' }}>
                    {formErrors.password}
                  </p>
                )}
              </div>

              {/* ===== ADDRESS FIELD - TR∆Ø·ªúNG ƒê·ªäA CH·ªà ===== */}
              <div>
                <label style={{ 
                  display: 'block', 
                  marginBottom: '8px', 
                  fontWeight: '600', 
                  color: '#374151',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}>
                  <FaMapMarkerAlt style={{ color: '#6b7280' }} />
                  ƒê·ªãa ch·ªâ *
                </label>
                {/* Textarea cho ƒë·ªãa ch·ªâ (cho ph√©p nhi·ªÅu d√≤ng) */}
                <textarea
                  value={formData.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: formErrors.address ? '2px solid #ef4444' : '2px solid #d1d5db',
                    borderRadius: '8px',
                    fontSize: '14px',
                    resize: 'vertical',
                    fontFamily: 'inherit',
                    boxSizing: 'border-box'
                  }}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß (v√≠ d·ª•: 123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng XYZ, Qu·∫≠n 1, TP.HCM)"
                />
                {/* Hi·ªÉn th·ªã l·ªói validation cho address (n·∫øu c√≥) */}
                {formErrors.address && (
                  <p style={{ color: '#ef4444', fontSize: '12px', margin: '4px 0 0 0' }}>
                    {formErrors.address}
                  </p>
                )}
              </div>

              {/* ===== SUBMIT BUTTONS - C√ÅC N√öT H√ÄNH ƒê·ªòNG ===== */}
              <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '20px' }}>
                {/* N√∫t H·ªßy - quay v·ªÅ dashboard */}
                <button
                  type="button"
                  onClick={() => navigate('/scstaff')}
                  style={{
                    padding: '12px 24px',
                    border: '2px solid #d1d5db',
                    borderRadius: '8px',
                    background: 'white',
                    color: '#374151',
                    cursor: 'pointer',
                    fontWeight: '500',
                    fontSize: '14px'
                  }}
                >
                  H·ªßy
                </button>
                {/* N√∫t Submit - t·∫°o t√†i kho·∫£n */}
                <button
                  type="submit"
                  disabled={loading}
                  style={{
                    padding: '12px 24px',
                    border: 'none',
                    borderRadius: '8px',
                    background: loading ? '#9ca3af' : '#ef4444',
                    color: 'white',
                    cursor: loading ? 'not-allowed' : 'pointer',
                    fontWeight: '500',
                    fontSize: '14px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px'
                  }}
                >
                  {loading ? (
                    <>
                      <FaSpinner style={{ animation: 'spin 1s linear infinite' }} />
                      ƒêang t·∫°o...
                    </>
                  ) : (
                    <>
                      <FaSave />
                      T·∫°o T√†i Kho·∫£n
                    </>
                  )}
                </button>
              </div>
            </div>
          </form>
        </div>
        
        {/* ===== INFO CARD - TH√îNG TIN H∆Ø·ªöNG D·∫™N ===== */}
        <div style={{
          background: '#f8fafc',
          border: '1px solid #e2e8f0',
          borderRadius: '8px',
          padding: '16px',
          marginTop: '24px'
        }}>
          <h4 style={{ margin: '0 0 8px 0', color: '#374151' }}>üìù L∆∞u √Ω:</h4>
          <ul style={{ margin: 0, paddingLeft: '20px', color: '#6b7280', fontSize: '14px' }}>
            <li>T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi (_) v√† g·∫°ch ngang (-)</li>
            <li>M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±</li>
            <li>Email ph·∫£i c√≥ ƒë·ªãnh d·∫°ng h·ª£p l·ªá</li>
            <li>ƒê·ªãa ch·ªâ ph·∫£i ƒë·∫ßy ƒë·ªß v√† chi ti·∫øt</li>
          </ul>
        </div>
      </div>
      
      {/* ===== CSS ANIMATION - HI·ªÜU ·ª®NG XOAY CHO SPINNER ===== */}
      <style>
        {`
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  );
};

// ===========================================================================================
// PH·∫¶N 8: EXPORT COMPONENT - XU·∫§T COMPONENT ƒê·ªÇ S·ª¨ D·ª§NG ·ªû N∆†I KH√ÅC
// ===========================================================================================

export default CreateCustomerAccount;